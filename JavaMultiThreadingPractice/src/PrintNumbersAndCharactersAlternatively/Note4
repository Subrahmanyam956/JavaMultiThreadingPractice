Question :
    Print the numbers in the format a1b2c3d4e5f6g.... alternatively... using two threads.

Answer : Here we have solved this question in two methodologies.
        1. using locking on Object
        2. using Reentrant Lock and conditions

        In both of these cases we used a boolean numberTurn to put a lock on this boolean object
        and coordinate between the two threads.

1. Using locking on object :

When we are defining a simple object, we are mimicing the behaviour of locking on the object
by using the synchronized keyword for a single thread inside cs at a time and using
wait and notify methods of the object class. Now we are maintaining the alternativity using the
numberTurn flag to check which thread waits and which thread runs.

            synchronized blocks allow mutual exclusion using an object monitor.
            wait() releases the lock and suspends the thread.
            notify() wakes up a waiting thread.

2. Using Reentrant lock :
    When using a Reentrant lock, we use the Condition class along with it. This condition class helps us in
awaiting and signalling the other thread and maintaining the alternativity.
    Here also we used the numberTurn flag to check the condition always between the two threads.

    NumberCondition will only check the flag when the condition gets a signal given by the characterThread.
    CharacterCondition will only check the flag when the condition gets a signal given by the NumberThread.

            ReentrantLock is an explicit lock object from java.util.concurrent.locks.
            Condition objects manage thread signaling (await() and signal()).
            Provides more granular control, supports fairness, timeout, and interruptibility.



summary:
-------
Use synchronized for simple locking needs with fewer threads.
Use ReentrantLock when you need:

        Explicit control
        Interrupt handling
        Timeouts
        Fine-grained coordination (multiple conditions)